version: "3.8"

services:
  stellar-scope:
    build:
      context: .
    ports:
      - "8080:1323"
    restart: on-failure
    container_name: astro
    environment:
      - APP_DB_PORT=${APP_DB_PORT:-5432}
      - APP_DB_NAME=${APP_DB_NAME:-image}
      - APP_DB_PASSWORD=${APP_DB_PASSWORD:-postgres}
      - APP_DB_USERNAME=${APP_DB_USERNAME:-postgres}
      - APOD_API_KEY=${APOD_API_KEY:-hexAwcWxOrEDePOQf3NrtOo78460rq8WplXhl3K9}
    networks:
      - astro
    depends_on:
      - postgres

  postgres:
    container_name: postgresql
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_DB=${APP_DB_NAME:-image}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD:-postgres}
      - POSTGRES_USER=${APP_DB_USERNAME:-postgres}
    ports:
      - ${APP_DB_PORT:-5432}:${APP_DB_PORT:-5432}
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "${APP_DB_USERNAME:-postgres}" ]
      interval: 5s
      timeout: 1s
      retries: 2
    networks:
      - astro

  minio:
    container_name: minio
    image: minio/minio:latest
    restart: always
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
    volumes:
      - ~/minio/data:/data
    networks:
      - astro

volumes:
  postgres:
    name: pg-data

networks:
  astro:
    driver: bridge